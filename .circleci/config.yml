# Tagging a commit with:
# - [circle front] will build the front page and perform test-doc
# - [circle full] will build everything
# - [circle linkcheck] will run our linkcheck
# - [circle interactive_test] will run our test suite (useful for debugging
#   issues using "Rerun with SSH")

version: 2.1

jobs:
    pre-check:
      docker:
        - image: cimg/python:3.8
      steps:
        #- checkout
        - run: git clone "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" ./target/new
        - run:
            name: checkout old version of the branch
            command: |
              mkdir test
              cd test
              echo "$CIRCLE_REPOSITORY_URL"
              echo "$CIRCLE_BRANCH"
              echo "*********************"
              git clone --depth 5 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH"
              cat circleci-project-setup/.circleci/config.yml 
              cd ..
              echo "**************old file *******".
              cat .circleci/config.yml 
              echo "**************new file *******".
              LAST_SUCCESSFUL_COMMIT=$(curl -Ss -u "$API_KEY:" "https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?filter=successful&limit=1" | jq -r '.[0]["vcs_revision"]')
              echo $LAST_SUCCESSFUL_COMMIT
              echo "Thanks"
        - run:
            name: Set BASH_ENV
            command: |
              echo "pre-test"
              sh pre_run.sh
    deploy:
      docker:
        - image: circleci/python:3.8.5-buster
      steps:
        - run:
            name: Set BASH_ENV
            command: |
              echo "post-test"

workflows:
  default:
    jobs:
      - pre-check:
          filters:
            branches:
              ignore:
                - circleci-project-setup
      - deploy:
          filters:
            branches:
              only:
                - circleci-project-setup


